
Lab3_enable_interrupt_atmega32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000152  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  000001a6  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000048  00000000  00000000  000001d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000207  00000000  00000000  0000021e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000119  00000000  00000000  00000425  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000001c7  00000000  00000000  0000053e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  000000c8  00000000  00000000  00000708  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000001e1  00000000  00000000  000007d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000102  00000000  00000000  000009b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000038  00000000  00000000  00000ab3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__vector_1>
   8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__vector_2>
   c:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__vector_3>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 51 00 	call	0xa2	; 0xa2 <main>
  64:	0c 94 a7 00 	jmp	0x14e	; 0x14e <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <GPIO_INIT>:
	
}
	void GPIO_INIT(void)
	{
		//SET PINS 5/6/7 OF PORTD AS AN OUTPUT 
		DDRD |=(1<<5);
  6c:	8d 9a       	sbi	0x11, 5	; 17
		DDRD |=(1<<6);
  6e:	8e 9a       	sbi	0x11, 6	; 17
		DDRD |=(1<<7);
  70:	8f 9a       	sbi	0x11, 7	; 17
  72:	08 95       	ret

00000074 <EXTI_INT>:
	/* (INTO)==> IRQ OCCUR WHEN (ANY CHANGE (RISING OR FALLING))
	   (INT1)==> IRQ OCCUR WHEN (RISING EDGE)
	   (INT2)==> IRQ OCCURE WHEN (FALLING EDGE)
	*/
	//INTO ANY CHANGE 
	MCUCR |=(1<<0);
  74:	85 b7       	in	r24, 0x35	; 53
  76:	81 60       	ori	r24, 0x01	; 1
  78:	85 bf       	out	0x35, r24	; 53
	// INT1 ==>RISING EDGE
	MCUCR |=(1<<2);
  7a:	85 b7       	in	r24, 0x35	; 53
  7c:	84 60       	ori	r24, 0x04	; 4
  7e:	85 bf       	out	0x35, r24	; 53
	MCUCR |=(1<<3);
  80:	85 b7       	in	r24, 0x35	; 53
  82:	88 60       	ori	r24, 0x08	; 8
  84:	85 bf       	out	0x35, r24	; 53
	//INT2 ==>FALLING EDGE 
	MCUCSR &= ~(1<<6);
  86:	84 b7       	in	r24, 0x34	; 52
  88:	8f 7b       	andi	r24, 0xBF	; 191
  8a:	84 bf       	out	0x34, r24	; 52
	//ENABLE EXTERNAL INTERRUPT (INT2)
	GICR |=(1<<5); 
  8c:	8b b7       	in	r24, 0x3b	; 59
  8e:	80 62       	ori	r24, 0x20	; 32
  90:	8b bf       	out	0x3b, r24	; 59
	//ENABLE EXTERNAL INTERRUPT (INT0)
	GICR |=(1<<6);
  92:	8b b7       	in	r24, 0x3b	; 59
  94:	80 64       	ori	r24, 0x40	; 64
  96:	8b bf       	out	0x3b, r24	; 59
	//ENABLE EXTERNAL INTERRUPT (INT1)
	GICR |=(1<<7);
  98:	8b b7       	in	r24, 0x3b	; 59
  9a:	80 68       	ori	r24, 0x80	; 128
  9c:	8b bf       	out	0x3b, r24	; 59
	// ENABLE GLOBAL INTERRUPT
	sei();
  9e:	78 94       	sei
  a0:	08 95       	ret

000000a2 <main>:
void GPIO_INIT(void);
void EXTI_INT(void);

int main(void)
{
	EXTI_INT();
  a2:	0e 94 3a 00 	call	0x74	; 0x74 <EXTI_INT>
	GPIO_INIT();
  a6:	0e 94 36 00 	call	0x6c	; 0x6c <GPIO_INIT>
	while (1)
	{
		PORTD &= ~(1<<5);
  aa:	95 98       	cbi	0x12, 5	; 18
		PORTD &= ~(1<<6);
  ac:	96 98       	cbi	0x12, 6	; 18
		PORTD &= ~(1<<7);
  ae:	97 98       	cbi	0x12, 7	; 18
  b0:	fc cf       	rjmp	.-8      	; 0xaa <main+0x8>

000000b2 <__vector_1>:
	GICR |=(1<<7);
	// ENABLE GLOBAL INTERRUPT
	sei();
	}
	ISR (INT0_vect)
	{
  b2:	1f 92       	push	r1
  b4:	0f 92       	push	r0
  b6:	0f b6       	in	r0, 0x3f	; 63
  b8:	0f 92       	push	r0
  ba:	11 24       	eor	r1, r1
  bc:	2f 93       	push	r18
  be:	8f 93       	push	r24
  c0:	9f 93       	push	r25
		PORTD |=(1<<5);
  c2:	95 9a       	sbi	0x12, 5	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c4:	2f ef       	ldi	r18, 0xFF	; 255
  c6:	89 e6       	ldi	r24, 0x69	; 105
  c8:	98 e1       	ldi	r25, 0x18	; 24
  ca:	21 50       	subi	r18, 0x01	; 1
  cc:	80 40       	sbci	r24, 0x00	; 0
  ce:	90 40       	sbci	r25, 0x00	; 0
  d0:	e1 f7       	brne	.-8      	; 0xca <__vector_1+0x18>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <__vector_1+0x22>
  d4:	00 00       	nop
		_delay_ms(1000);
		
	}
  d6:	9f 91       	pop	r25
  d8:	8f 91       	pop	r24
  da:	2f 91       	pop	r18
  dc:	0f 90       	pop	r0
  de:	0f be       	out	0x3f, r0	; 63
  e0:	0f 90       	pop	r0
  e2:	1f 90       	pop	r1
  e4:	18 95       	reti

000000e6 <__vector_2>:
	ISR (INT1_vect)
	{
  e6:	1f 92       	push	r1
  e8:	0f 92       	push	r0
  ea:	0f b6       	in	r0, 0x3f	; 63
  ec:	0f 92       	push	r0
  ee:	11 24       	eor	r1, r1
  f0:	2f 93       	push	r18
  f2:	8f 93       	push	r24
  f4:	9f 93       	push	r25
		PORTD |=(1<<6);
  f6:	96 9a       	sbi	0x12, 6	; 18
  f8:	2f ef       	ldi	r18, 0xFF	; 255
  fa:	89 e6       	ldi	r24, 0x69	; 105
  fc:	98 e1       	ldi	r25, 0x18	; 24
  fe:	21 50       	subi	r18, 0x01	; 1
 100:	80 40       	sbci	r24, 0x00	; 0
 102:	90 40       	sbci	r25, 0x00	; 0
 104:	e1 f7       	brne	.-8      	; 0xfe <__vector_2+0x18>
 106:	00 c0       	rjmp	.+0      	; 0x108 <__vector_2+0x22>
 108:	00 00       	nop
		_delay_ms(1000);
			
	}
 10a:	9f 91       	pop	r25
 10c:	8f 91       	pop	r24
 10e:	2f 91       	pop	r18
 110:	0f 90       	pop	r0
 112:	0f be       	out	0x3f, r0	; 63
 114:	0f 90       	pop	r0
 116:	1f 90       	pop	r1
 118:	18 95       	reti

0000011a <__vector_3>:
	ISR (INT2_vect)
	{
 11a:	1f 92       	push	r1
 11c:	0f 92       	push	r0
 11e:	0f b6       	in	r0, 0x3f	; 63
 120:	0f 92       	push	r0
 122:	11 24       	eor	r1, r1
 124:	2f 93       	push	r18
 126:	8f 93       	push	r24
 128:	9f 93       	push	r25
		PORTD |=(1<<7);
 12a:	97 9a       	sbi	0x12, 7	; 18
 12c:	2f ef       	ldi	r18, 0xFF	; 255
 12e:	89 e6       	ldi	r24, 0x69	; 105
 130:	98 e1       	ldi	r25, 0x18	; 24
 132:	21 50       	subi	r18, 0x01	; 1
 134:	80 40       	sbci	r24, 0x00	; 0
 136:	90 40       	sbci	r25, 0x00	; 0
 138:	e1 f7       	brne	.-8      	; 0x132 <__vector_3+0x18>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <__vector_3+0x22>
 13c:	00 00       	nop
		_delay_ms(1000);
		
	}
 13e:	9f 91       	pop	r25
 140:	8f 91       	pop	r24
 142:	2f 91       	pop	r18
 144:	0f 90       	pop	r0
 146:	0f be       	out	0x3f, r0	; 63
 148:	0f 90       	pop	r0
 14a:	1f 90       	pop	r1
 14c:	18 95       	reti

0000014e <_exit>:
 14e:	f8 94       	cli

00000150 <__stop_program>:
 150:	ff cf       	rjmp	.-2      	; 0x150 <__stop_program>
