
section1_lab.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ec  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  00000140  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000020  00000000  00000000  00000170  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000014d  00000000  00000000  00000190  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000d9  00000000  00000000  000002dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000167  00000000  00000000  000003b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000024  00000000  00000000  00000520  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000016f  00000000  00000000  00000544  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000000f8  00000000  00000000  000006b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000010  00000000  00000000  000007ab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 74 00 	jmp	0xe8	; 0xe8 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include "memorymap.h"

int main(void)
{
	     //set PORTA as an output
	     DDRA = 0xff ;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	8a bb       	out	0x1a, r24	; 26
    while(1)
    {
   int i ;
   for (i=0 ;i<=7 ;i++ )
  70:	80 e0       	ldi	r24, 0x00	; 0
  72:	90 e0       	ldi	r25, 0x00	; 0
  74:	e7 e0       	ldi	r30, 0x07	; 7
  76:	70 e0       	ldi	r23, 0x00	; 0
	   SET_BIT(PORTA,i);
	   _delay_ms (500);
   }
   for (i=7;i>=0 ;i--)
   {
	   CLEAR_BIT(PORTA,i);
  78:	41 e0       	ldi	r20, 0x01	; 1
  7a:	50 e0       	ldi	r21, 0x00	; 0
	     //set PORTA as an output
	     DDRA = 0xff ;
    while(1)
    {
   int i ;
   for (i=0 ;i<=7 ;i++ )
  7c:	a0 e0       	ldi	r26, 0x00	; 0
  7e:	f0 e0       	ldi	r31, 0x00	; 0
  80:	17 c0       	rjmp	.+46     	; 0xb0 <main+0x44>
   {
	   SET_BIT(PORTA,i);
  82:	6b b3       	in	r22, 0x1b	; 27
  84:	9a 01       	movw	r18, r20
  86:	08 2e       	mov	r0, r24
  88:	02 c0       	rjmp	.+4      	; 0x8e <main+0x22>
  8a:	22 0f       	add	r18, r18
  8c:	33 1f       	adc	r19, r19
  8e:	0a 94       	dec	r0
  90:	e2 f7       	brpl	.-8      	; 0x8a <main+0x1e>
  92:	26 2b       	or	r18, r22
  94:	2b bb       	out	0x1b, r18	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  96:	2f ef       	ldi	r18, 0xFF	; 255
  98:	34 e3       	ldi	r19, 0x34	; 52
  9a:	6c e0       	ldi	r22, 0x0C	; 12
  9c:	21 50       	subi	r18, 0x01	; 1
  9e:	30 40       	sbci	r19, 0x00	; 0
  a0:	60 40       	sbci	r22, 0x00	; 0
  a2:	e1 f7       	brne	.-8      	; 0x9c <main+0x30>
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <main+0x3a>
  a6:	00 00       	nop
	     //set PORTA as an output
	     DDRA = 0xff ;
    while(1)
    {
   int i ;
   for (i=0 ;i<=7 ;i++ )
  a8:	01 96       	adiw	r24, 0x01	; 1
  aa:	02 c0       	rjmp	.+4      	; 0xb0 <main+0x44>
  ac:	8a 2f       	mov	r24, r26
  ae:	9f 2f       	mov	r25, r31
  b0:	88 30       	cpi	r24, 0x08	; 8
  b2:	91 05       	cpc	r25, r1
  b4:	34 f3       	brlt	.-52     	; 0x82 <main+0x16>
  b6:	8e 2f       	mov	r24, r30
  b8:	97 2f       	mov	r25, r23
	   SET_BIT(PORTA,i);
	   _delay_ms (500);
   }
   for (i=7;i>=0 ;i--)
   {
	   CLEAR_BIT(PORTA,i);
  ba:	6b b3       	in	r22, 0x1b	; 27
  bc:	9a 01       	movw	r18, r20
  be:	08 2e       	mov	r0, r24
  c0:	02 c0       	rjmp	.+4      	; 0xc6 <main+0x5a>
  c2:	22 0f       	add	r18, r18
  c4:	33 1f       	adc	r19, r19
  c6:	0a 94       	dec	r0
  c8:	e2 f7       	brpl	.-8      	; 0xc2 <main+0x56>
  ca:	20 95       	com	r18
  cc:	26 23       	and	r18, r22
  ce:	2b bb       	out	0x1b, r18	; 27
  d0:	2f ef       	ldi	r18, 0xFF	; 255
  d2:	34 e3       	ldi	r19, 0x34	; 52
  d4:	6c e0       	ldi	r22, 0x0C	; 12
  d6:	21 50       	subi	r18, 0x01	; 1
  d8:	30 40       	sbci	r19, 0x00	; 0
  da:	60 40       	sbci	r22, 0x00	; 0
  dc:	e1 f7       	brne	.-8      	; 0xd6 <main+0x6a>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <main+0x74>
  e0:	00 00       	nop
   for (i=0 ;i<=7 ;i++ )
   {
	   SET_BIT(PORTA,i);
	   _delay_ms (500);
   }
   for (i=7;i>=0 ;i--)
  e2:	01 97       	sbiw	r24, 0x01	; 1
  e4:	50 f7       	brcc	.-44     	; 0xba <main+0x4e>
  e6:	e2 cf       	rjmp	.-60     	; 0xac <main+0x40>

000000e8 <_exit>:
  e8:	f8 94       	cli

000000ea <__stop_program>:
  ea:	ff cf       	rjmp	.-2      	; 0xea <__stop_program>
