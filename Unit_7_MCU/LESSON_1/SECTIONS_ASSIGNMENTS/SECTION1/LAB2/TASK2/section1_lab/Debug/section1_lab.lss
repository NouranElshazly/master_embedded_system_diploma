
section1_lab.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  0000010c  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000020  00000000  00000000  0000013c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000115  00000000  00000000  0000015c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000d8  00000000  00000000  00000271  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000147  00000000  00000000  00000349  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000024  00000000  00000000  00000490  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000016f  00000000  00000000  000004b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00000028  00000000  00000000  00000623  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include "memorymap.h"

int main(void)
{
	     //set PORTA as an output
	     DDRA = 0xff ;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	8a bb       	out	0x1a, r24	; 26
		 CLEAR_BIT(DDRC,0);
  70:	a0 98       	cbi	0x14, 0	; 20
		 SET_BIT(PORTC,0);
  72:	a8 9a       	sbi	0x15, 0	; 21
		
    while(1)
    {
       if(READ_BIT(PINC,0)==0)
  74:	e0 e0       	ldi	r30, 0x00	; 0
  76:	70 e0       	ldi	r23, 0x00	; 0
     {
	  
	     for (int i=0;i<=7;i++)
		    {
	 
			   SET_BIT(PORTA,i);
  78:	41 e0       	ldi	r20, 0x01	; 1
  7a:	50 e0       	ldi	r21, 0x00	; 0
		 CLEAR_BIT(DDRC,0);
		 SET_BIT(PORTC,0);
		
    while(1)
    {
       if(READ_BIT(PINC,0)==0)
  7c:	98 99       	sbic	0x13, 0	; 19
  7e:	fe cf       	rjmp	.-4      	; 0x7c <main+0x10>
  80:	8e 2f       	mov	r24, r30
  82:	97 2f       	mov	r25, r23
     {
	  
	     for (int i=0;i<=7;i++)
		    {
	 
			   SET_BIT(PORTA,i);
  84:	6b b3       	in	r22, 0x1b	; 27
  86:	9a 01       	movw	r18, r20
  88:	08 2e       	mov	r0, r24
  8a:	02 c0       	rjmp	.+4      	; 0x90 <main+0x24>
  8c:	22 0f       	add	r18, r18
  8e:	33 1f       	adc	r19, r19
  90:	0a 94       	dec	r0
  92:	e2 f7       	brpl	.-8      	; 0x8c <main+0x20>
  94:	26 2b       	or	r18, r22
  96:	2b bb       	out	0x1b, r18	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  98:	2f ef       	ldi	r18, 0xFF	; 255
  9a:	30 e7       	ldi	r19, 0x70	; 112
  9c:	62 e0       	ldi	r22, 0x02	; 2
  9e:	21 50       	subi	r18, 0x01	; 1
  a0:	30 40       	sbci	r19, 0x00	; 0
  a2:	60 40       	sbci	r22, 0x00	; 0
  a4:	e1 f7       	brne	.-8      	; 0x9e <main+0x32>
  a6:	00 c0       	rjmp	.+0      	; 0xa8 <main+0x3c>
  a8:	00 00       	nop
    while(1)
    {
       if(READ_BIT(PINC,0)==0)
     {
	  
	     for (int i=0;i<=7;i++)
  aa:	01 96       	adiw	r24, 0x01	; 1
  ac:	88 30       	cpi	r24, 0x08	; 8
  ae:	91 05       	cpc	r25, r1
  b0:	49 f7       	brne	.-46     	; 0x84 <main+0x18>
  b2:	e4 cf       	rjmp	.-56     	; 0x7c <main+0x10>

000000b4 <_exit>:
  b4:	f8 94       	cli

000000b6 <__stop_program>:
  b6:	ff cf       	rjmp	.-2      	; 0xb6 <__stop_program>
